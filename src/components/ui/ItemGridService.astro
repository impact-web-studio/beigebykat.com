---
import type { ItemGridService as Props } from '~/types';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import { Image } from 'astro:assets';

const { items = [], columns, classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  image: defaultImageClass = '',
  price: priceClass = '',
  action: actionClass = '',
} = classes;
---

{
  items && items.length > 0 && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, price, description, image, callToAction, classes: itemClasses = {} }) => (
        <div class="intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade bg-white rounded-sm shadow-sm overflow-hidden">
          <div class={twMerge('flex flex-row max-w-md gap-2', panelClass, itemClasses?.panel)}>
            <div class="flex justify-center w-full">
              {image && (
                <Image
                  src={image}
                  class={twMerge('w-[500px] h-full mr-2 rtl:mr-0 rtl:ml-2', defaultImageClass, itemClasses?.image)}
                  alt="alt"
                  width={500}
                  height={1000}
                  format="webp"
                />
              )}
            </div>
            <div class="mt-0.5 p-3">
              {title && <h3 class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</h3>}
              {price && (
                <p
                  class={twMerge(priceClass, itemClasses?.price)}
                  set:html={price}
                />
              )}
              {description && (
                <p
                  class={twMerge(`${title ? 'mt-3' : ''} text-muted`, descriptionClass, itemClasses?.description)}
                  set:html={description}
                />
              )}
              {callToAction && (
                <div class={twMerge(`${title || description ? 'mt-3' : ''}`, actionClass, itemClasses?.actionClass)}>
                  <Button
                    variant="link"
                    {...callToAction}
                  />
                </div>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  )
}
