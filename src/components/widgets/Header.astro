---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import Button from '~/components/ui/Button.astro';

import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash, getAsset } from '~/utils/permalinks';
import type { CallToAction } from '~/types';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
  sectionId?: string; // Added for section tracking
  isHome?: boolean; // Added to identify home link
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isFullWidth = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky },
    'top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] duration-300 ease-in-out',
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative text-default py-3 px-3 lg:px-6 mx-auto w-full',
      {
        'lg:flex lg:justify-between': position !== 'center',
      },
      {
        'lg:grid lg:grid-cols-3 lg:items-center': position === 'center',
      },
      {
        'max-w-7xl': !isFullWidth,
      },
    ]}
  >
    <nav
      class="items-center w-full max-sm:!px-3 max-sm:!py-2 lg:w-auto hidden lg:flex lg:mx-5 text-default overflow-y-auto overflow-x-hidden lg:overflow-y-visible lg:overflow-x-auto lg:justify-self-center"
      aria-label="Main navigation"
      id="main-navigation"
    >
      <ul
        class="flex flex-col mt-3 lg:flex-row lg:self-center w-full lg:w-auto text-xl lg:text-[0.9375rem] tracking-[0.01rem] font-medium lg:justify-center"
      >
        {
          links.map(({ text, href, links, sectionId, isHome }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class="hover:text-link dark:hover:text-white px-3 py-3 flex items-center whitespace-nowrap uppercase font-serif"
                  >
                    {text}{' '}
                    <Icon
                      name="tabler:chevron-down"
                      class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden lg:inline"
                    />
                  </button>
                  <ul class="dropdown-menu lg:backdrop-blur-md dark:lg:bg-dark rounded lg:absolute pl-4 lg:pl-0 lg:hidden font-medium lg:bg-white/90 lg:min-w-[200px] drop-shadow-xl">
                    {links.map(({ text: text2, href: href2, sectionId: sectionId2, isHome: isHome2 }) => (
                      <li>
                        <a
                          class:list={[
                            'first:rounded-t last:rounded-b lg:hover:bg-gray-100 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap uppercase !font-serif',
                            { 'text-primary': href2 === currentPath },
                          ]}
                          href={href2}
                          data-section-id={sectionId2 || ''}
                          data-is-home={isHome2 ? 'true' : 'false'}
                          data-full-href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'nav-link hover:text-link dark:hover:text-white px-2 py-3 xl:px-4 flex items-center whitespace-nowrap uppercase font-normal font-serif',
                    { 'text-primary': href === currentPath },
                  ]}
                  href={href}
                  data-section-id={sectionId || ''}
                  data-is-home={isHome ? 'true' : 'false'}
                  data-full-href={href}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' },
        'flex items-center justify-between lg:justify-center',
      ]}
    >
      <Logo />
      <div class="flex items-center lg:hidden">
        <ToggleMenu />
      </div>
    </div>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden lg:self-center lg:flex items-center lg:mb-0 fixed w-full lg:static justify-center left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 lg:p-0 lg:justify-self-end',
      ]}
    >
      <div class="flex lg:text-[0.9375rem]">
        {
          actions?.length &&
            actions.map((btnProps) => (
              <Button
                {...btnProps}
                class="font-serif uppercase font-normal px-2 py-3 xl:px-4"
                type="anchor"
                variant="link"
              />
            ))
        }
      </div>
    </div>
  </div>

  <script>
    // Improved navigation functionality to handle view transitions
    function setupNavigationHighlighting() {
      console.log('1. setupNavigationHighlighting Function called');
      const sections = document.querySelectorAll('section[id]');
      const navLinks = document.querySelectorAll('header a');
      const currentPath = window.location.pathname;
      console.log('setup triggered, current page', currentPath);
      const isHomePage = currentPath === '/' || currentPath === '';
      console.log('2. Home Page Fu Check', isHomePage);

      // Active class to use when a section is in viewport
      const ACTIVE_CLASS = 'text-primary transition-colors duration-300 ease-in-out';

      // Reset all links first
      function resetAllLinks() {
        console.log('3. ResetallLinks');

        navLinks.forEach((link) => {
          link.classList.remove(...ACTIVE_CLASS.split(' '));
        });
      }

      // Highlight the appropriate link based on current URL path
      function highlightCurrentPageLink() {
        resetAllLinks();

        navLinks.forEach((link) => {
          const linkPath = link.getAttribute('href');
          const linkFullHref = link.getAttribute('data-full-href');
          const linkIsHome = link.getAttribute('data-is-home') === 'true';

          // Check if this link matches the current path
          if (
            (!isHomePage && linkPath === currentPath) ||
            (!isHomePage && linkPath === `/${trimSlash(currentPath)}`) ||
            (!isHomePage && `/${trimSlash(linkPath)}` === currentPath) ||
            (!isHomePage && linkFullHref === currentPath) ||
            (isHomePage && linkIsHome && window.scrollY < 50)
          ) {
            link.classList.add(...ACTIVE_CLASS.split(' '));
          }
        });
      }
      console.log('rando check. Home Page Check', isHomePage);

      // Special handling for top of page - activate home link when at the top
      // Replace the handleScrollTop function with this version
      function handleScrollTop() {
        // Check if we're currently on the home page by examining the current path
        const currentPagePath = window.location.pathname;
        const isCurrentlyHomePage = currentPagePath === '/' || currentPagePath === '';

        if (isCurrentlyHomePage && window.scrollY < 50) {
          console.log('4. handleScrollTop Called - is home page:', isCurrentlyHomePage);

          resetAllLinks();

          // Add active class to home link
          const homeLink = document.querySelector('#main-navigation a[data-is-home="true"]');
          if (homeLink) {
            console.log('5. add active class to home link', isCurrentlyHomePage, homeLink);
            homeLink.classList.add(...ACTIVE_CLASS.split(' '));
          }
        }
      }

      // Set up intersection observer for section highlighting on home page
      function setupSectionObserver() {
        if (!isHomePage) return;

        const observerOptions = {
          rootMargin: '-100px 0px -70% 0px',
          threshold: 0,
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const id = entry.target.getAttribute('id');

              // Don't process if we're at the top of the page
              if (window.scrollY < 50) return;

              resetAllLinks();

              // Add active class to corresponding nav link
              const correspondingLink = document.querySelector(`#main-navigation a[data-section-id="${id}"]`);
              if (correspondingLink) {
                correspondingLink.classList.add(...ACTIVE_CLASS.split(' '));
              }
            }
          });
        }, observerOptions);

        // Observe all sections
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
      // Replace the setupClickHandlers function
      function setupClickHandlers() {
        navLinks.forEach((link) => {
          link.addEventListener('click', (e) => {
            const isHome = link.getAttribute('data-is-home') === 'true';
            const sectionId = link.getAttribute('data-section-id');
            const currentPagePath = window.location.pathname;
            const isCurrentlyHomePage = currentPagePath === '/' || currentPagePath === '';

            // Only handle section scrolling when on home page
            if (isCurrentlyHomePage && sectionId && sectionId !== '') {
              e.preventDefault();
              const section = document.getElementById(sectionId);
              if (section) {
                section.scrollIntoView({ behavior: 'smooth' });
              }
            }
            // Handle home link on home page
            else if (isHome && isCurrentlyHomePage) {
              e.preventDefault();
              window.scrollTo({ top: 0, behavior: 'smooth' });
            }
          });
        });
      }

      // Add this to your Astro component's script section, outside any function
      // This handles the transition from another page to a section
      document.addEventListener('astro:after-swap', () => {
        // Check if we need to scroll to a section after page transition
        const urlHash = window.location.hash;
        if (urlHash) {
          // Clean URL without changing scroll position yet
          const scrollPos = window.scrollY;
          history.replaceState(null, document.title, window.location.pathname);
          window.scrollTo(0, scrollPos);

          // Now scroll to the section
          const sectionId = urlHash.substring(1);
          const section = document.getElementById(sectionId);
          if (section) {
            setTimeout(() => {
              section.scrollIntoView({ behavior: 'smooth' });
            }, 10);
          }
        }
      });

      // Initial setup
      highlightCurrentPageLink();
      setupSectionObserver();
      setupClickHandlers();

      // Add scroll listener only for home page
      if (isHomePage) {
        window.addEventListener('scroll', handleScrollTop);
      }
    }

    // Setup on initial page load
    document.addEventListener('astro:page-load', setupNavigationHighlighting);

    // Setup on view transitions
    // document.addEventListener('astro:after-preparation', setupNavigationHighlighting);

    // Helper function to trim slashes like in the server-side version
    function trimSlash(s) {
      return s.replace(/^\/+|\/+$/g, '');
    }
  </script>
</header>
